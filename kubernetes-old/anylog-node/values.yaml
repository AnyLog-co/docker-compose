metadata:
  # Kubernetes Instance namespace
  namespace: default
  # hostname for deployment
  hostname: anylog-node
  # deployment application name
  app_name: anylog-node
  # Pod application name
  pod_name: anylog-node-pod
  # Kubernetes deployment name
  deployment_name: anylog-node-deployment
  # Kubernetes service name
  service_name: anylog-node-service
  # Configuration mapping name
  configmap_name: anylog-node-configmap
  # Allows running Kubernetes remotely. If commented out, code will ignore it
  node_selector: ''
  # Number of Kubernetes replicas
  replicas: 1
image:
  # Image secret naming
  secret_name: imagepullsecret
  # (Docker Hub) Image Path
  repository: anylogco/anylog-network
  # Image version
  tag: test-arm64
  # Image pulling policy
  pull_policy: Always
  # whether to deploy AnyLog (prod) or a linux cli (bash) with AnyLog installed, but not running
  init_type: prod


node_configs:
  directories:
    # AnyLog Root Path
    ANYLOG_PATH: /app
    # !local_scripts: ${ANYLOG_HOME}/deployment-scripts/scripts
    LOCAL_SCRIPTS: /app/deployment-scripts/node-deployment
    # !test_dir: ${ANYLOG_HOME}/deployment-scripts/test
    TEST_DIR: /app/deployment-scripts/test
  general:
    # AnyLog License Key
    LICENSE_KEY: ''
    # Information regarding which AnyLog node configurations to enable. By default, even if everything is disabled, AnyLog starts TCP and REST connection protocols
    NODE_TYPE: generic
    # Name of the AnyLog instance
    NODE_NAME: anylog_node
    # Owner of the Anylog instance
    COMPANY_NAME: New Company
  geolocation:
    # Coordinates of the machine - used by Grafana to map the network
    LOCATION: ''
    # Country where machine is located
    COUNTRY: ''
    # State where machine is located
    STATE: ''
    # City where machine is located
    CITY: ''
  networking:
    # Port address used by AnyLog's TCP protocol to communicate with other nodes in the network
    ANYLOG_SERVER_PORT: 32458
    # Port address used by AnyLog's REST protocol
    ANYLOG_REST_PORT: 32459

    # Declare Policy name
    CONFIG_NAME: ''
    # Overlay IP address - if set, will replace local IP address when connecting to network
    OVERLAY_IP: ''
    # Configurable (local) IP address that can be used when behind a proxy, or using Kubernetes for static IP
    PROXY_IP: ''
    # Port value to be used as an MQTT broker, or some other third-party broker
    ANYLOG_BROKER_PORT: ''
    # A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
    TCP_BIND: false
    # The number of concurrent threads supporting HTTP requests.	
    TCP_THREADS: 6
    # A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
    REST_BIND: false
    # Timeout in seconds to determine a time interval such that if no response is being returned during the time interval, the system returns timeout error.
    REST_TIMEOUT: 30
    # The number of concurrent threads supporting HTTP requests.	
    REST_THREADS: 6
    # A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
    BROKER_BIND: false
    # The number of concurrent threads supporting broker requests.	
    BROKER_THREADS: 6
  database:
    # Physical database type
    DB_TYPE: sqlite
    # Username for SQL database connection
    DB_USER: ''
    # Password correlated to database user
    DB_PASSWD: ''
    # Database IP address
    DB_IP: 127.0.0.1
    # Database port number
    DB_PORT: 5432
    # Whether to set autocommit data
    AUTOCOMMIT: false
    # Whether to start system_query logical database
    SYSTEM_QUERY: false
    # Run system_query using in-memory SQLite. If set to false, will use pre-set database type
    MEMORY: true
    # Whether to enable NoSQL logical database
    ENABLE_NOSQL: false
    # Physical database type
    NOSQL_TYPE: mongo
    # Username for SQL database connection
    NOSQL_USER: ''
    # Password correlated to database user
    NOSQL_PASSWD: ''
    # Database IP address
    NOSQL_IP: 127.0.0.1
    # Database port number
    NOSQL_PORT: 27017
    # Store blobs in database
    BLOBS_DBMS: false
    # Whether (re)store a blob if already exists
    BLOBS_REUSE: true
  blockchain:
    # TCP connection information for Master Node
    LEDGER_CONN: 192.168.86.156:32048
    # How often to sync from blockchain
    SYNC_TIME: 30 second
    # Source of where the data is coming from
    BLOCKCHAIN_SOURCE: master
    # Where will the copy of the blockchain be stored
    BLOCKCHAIN_DESTINATION: file
  operator:
    # Owner of the cluster
    CLUSTER_NAME: new-company-cluster1
    # Logical database name
    DEFAULT_DBMS: new_company
    # Operator ID
    MEMBER: ''
    # Whether of not to enable HA against the cluster
    ENABLE_HA: false
    # How many days back to sync between nodes
    START_DATE: 30
    # Whether to enable partitioning
    ENABLE_PARTITIONS: false
    # Which tables to partition
    TABLE_NAME: '*'
    # Which timestamp column to partition by
    PARTITION_COLUMN: insert_timestamp
    # Time period to partition by
    PARTITION_INTERVAL: 1 day
    # How many partitions to keep
    PARTITION_KEEP: 3
    # How often to check if an old partition should be removed
    PARTITION_SYNC: 1 day
    # How many threads to use in the operator process
    OPERATOR_THREADS: 3
  mqtt:
    # Whether to enable the default MQTT process
    ENABLE_MQTT: false
    # Whether to enable MQTT logging process
    MQTT_LOG: false
    # IP address of MQTT broker
    MQTT_BROKER: driver.cloudmqtt.com
    # Port associated with MQTT broker
    MQTT_PORT: 18785
    # User associated with MQTT broker
    MQTT_USER: ibglowct
    # Password associated with MQTT user
    MQTT_PASSWD: MSY4e009J7ts
    # Topic to get data for
    MQTT_TOPIC: anylogedgex-demo
    # Logical database name
    MQTT_DBMS: new_company
    # Table where to store data
    MQTT_TABLE: bring [sourceName]
    # Timestamp column name
    MQTT_TIMESTAMP_COLUMN: now
    # Value column name
    MQTT_VALUE_COLUMN: bring [readings][][value]
    # Column value type
    MQTT_VALUE_COLUMN_TYPE: int
  monitoring:
    # Whether to monitor the node or not
    MONITOR_NODES: true
    # Which node type to send monitoring information to
    MONITOR_NODE: query
    # Company node is associated with the monitor node
    MONITOR_NODE_COMPANY: New Company
  advanced:
    # Whether to automatically run a local (or personalized) script at the end of the process
    DEPLOY_LOCAL_SCRIPT: false
    # Deploy a process that accepts syslog
    DEPLOY_SYSLOG: false
    # Compress JSON and SQL file(s) backup
    COMPRESS_FILE: true
    # Number of parallel queries
    QUERY_POOL: 6
    # When data comes in write to database immediately, as opposed to waiting for a full buffer
    WRITE_IMMEDIATE: true
    # If buffer is not full, how long to wait until pushing data through
    THRESHOLD_TIME: 60 seconds
    # Buffer size to reach, at which point data is pushed through
    THRESHOLD_VOLUME: 10KB
  nebula:
    ENABLE_NEBULA: false
    NEBULA_CONFIG_FILE: /root/deployments/nebula/config_lighthouse.yml

volume:
  # Whether to enable volumes for AnyLog
  enable_volume: false
  anylog_volume:     # volume name: {.Values.metadata.deployment_name}-anylog-dir
    # Volume name associated with anylog directory
    volume_name: anylog-node-anylog-dir
    volume_name_pvc: anylog-node-anylog-dir-pvc
    # AnyLog security directory path
    path: /app/AnyLog-Network/anylog
    # Volume access mode
    access_mode: ReadWriteOnce
    # Volume storage size
    storage_size: 1Gi
  blockchain_volume:     # volume name: {.Values.metadata.deployment_name}-blockchain-dir
    # Volume name associated with blockchain directory
    volume_name: anylog-node-blockchain-dir
    volume_name_pvc: anylog-node-blockchain-dir-pvc
    # AnyLog blockchain directory path
    path: /app/AnyLog-Network/blockchain
    # Volume access mode
    access_mode: ReadWriteOnce
    # Volume storage size
    storage_size: 1Gi
  data_volume:     # volume name: {.Values.metadata.deployment_name}-data-dir
    # Volume name associated with data directory
    volume_name: anylog-node-data-dir
    volume_name_pvc: anylog-node-data-dir-pvc
    # AnyLog data directory path
    path: /app/AnyLog-Network/data
    # Volume access mode
    access_mode: ReadWriteOnce
    # Volume storage size
    storage_size: 1Gi
  local_scripts: # volume name: {.Values.metadata.deployment_name}-local-scripts
    # AnyLog local scripts directory path
    path: /app/deployment-scripts/node-deployment
    # Volume access mode
    access_mode: ReadWriteOnce
    # Volume storage size
    storage_size: 1Gi
  test_scripts: # volume name: {.Values.metadata.deployment_name}-tests
    # AnyLog test cases directory path
    path: /app/deployment-scripts/test
    # Volume access mode
    access_mode: ReadWriteOnce
    # Volume storage size
    storage_size: 1Gi