apiVersion: v1
kind: ConfigMap
metadata:
  namespace: '{{ .Values.metadata.namespace }}'
  name: '{{ .Values.metadata.configmap_name }}'
  labels:
    app: '{{ .Values.metadata.app_name }}'
data:
  # -- Directory Params:
  ANYLOG_PATH: '{{ .Values.node_configs.directories.ANYLOG_PATH }}'
  LOCAL_SCRIPTS: '{{ .Values.node_configs.directories.LOCAL_SCRIPTS }}'
  TEST_DIR: '{{ .Values.node_configs.directories.TEST_DIR }}'

  # -- INIT Type --
  INIT_TYPE: '{{ .Values.image.init_type }}'
  DISABLE_CLI: '{{ .Values.image.disable_cli }}'
  # Inform system deployment is in Kubernetes format - this set the PROXY_IP value as a valid host
  IS_KUBERNETES: 'true'

  # -- General --
  LICENSE_KEY: {{ .Values.node_configs.general.LICENSE_KEY }}
  NODE_TYPE: '{{ .Values.node_configs.general.NODE_TYPE }}'
  NODE_NAME: '{{ .Values.metadata.app_name }}'
  COMPANY_NAME: '{{ .Values.node_configs.general.COMPANY_NAME }}'

  # -- Geolocation --
  {{- if ne .Values.node_configs.geolocation.LOCATION "" }}
  LOCATION: '{{ .Values.node_configs.geolocation.LOCATION }}'
  {{ end }}
  {{- if ne .Values.node_configs.geolocation.COUNTRY "" }}
  COUNTRY: '{{ .Values.node_configs.geolocation.COUNTRY }}'
  {{ end }}
  {{- if ne .Values.node_configs.geolocation.STATE "" }}
  STATE: '{{ .Values.node_configs.geolocation.STATE }}'
  {{ end }}
  {{- if ne .Values.node_configs.geolocation.CITY "" }}
  CITY: '{{ .Values.node_configs.geolocation.CITY }}'
  {{ end }}

  # -- Networking --
  {{- if ne  .Values.node_configs.networking.OVERLAY_IP "" }}
  OVERLAY_IP: '{{ .Values.node_configs.networking.OVERLAY_IP }}'
  {{ end }}
  PROXY_IP: '{{ .Values.metadata.namespace}}.{{ .Values.metadata.service_name }}.svc.cluster.local'

  ANYLOG_SERVER_PORT: '{{ .Values.node_configs.networking.ANYLOG_SERVER_PORT }}'
  ANYLOG_REST_PORT: '{{ .Values.node_configs.networking.ANYLOG_REST_PORT }}'
  {{- if .Values.node_configs.networking.ANYLOG_BROKER_PORT }}
  ANYLOG_BROKER_PORT: '{{ .Values.node_configs.networking.ANYLOG_BROKER_PORT }}'
  {{ end }}

  TCP_BIND: '{{ .Values.node_configs.networking.TCP_BIND }}'
  REST_BIND: '{{ .Values.node_configs.networking.REST_BIND }}'
  BROKER_BIND: '{{ .Values.node_configs.networking.BROKER_BIND }}'


  # -- Database --
  DB_TYPE: '{{ .Values.node_configs.database.DB_TYPE }}'
  {{- if ne .Values.node_configs.database.DB_USER "" }}
  DB_USER: '{{ .Values.node_configs.database.DB_USER }}'
  {{ end }}
  {{- if ne .Values.node_configs.database.DB_PASSWD "" }}
  DB_PASSWD: '{{ .Values.node_configs.database.DB_PASSWD }}'
  {{ end }}
  DB_IP: '{{ .Values.node_configs.database.DB_IP }}'
  DB_PORT: '{{ .Values.node_configs.database.DB_PORT }}'
  AUTOCOMMIT: '{{ .Values.node_configs.database.AUTOCOMMIT }}'
  ENABLE_NOSQL: '{{ .Values.node_configs.database.ENABLE_NOSQL }}'

  SYSTEM_QUERY: '{{ .Values.node_configs.database.SYSTEM_QUERY }}'
  MEMORY: '{{ .Values.node_configs.database.MEMORY }}'

  NOSQL_TYPE: '{{ .Values.node_configs.database.NOSQL_TYPE }}'
  {{- if ne .Values.node_configs.database.NOSQL_USER "" }}
  NOSQL_USER: '{{ .Values.node_configs.database.NOSQL_USER }}'
  {{ end }}
  {{- if ne .Values.node_configs.database.NOSQL_PASSWD "" }}
  NOSQL_PASSWD: '{{ .Values.node_configs.database.DB_PASSWD }}'
  {{ end }}
  NOSQL_IP: '{{ .Values.node_configs.database.NOSQL_IP }}'
  NOSQL_PORT: '{{ .Values.node_configs.database.NOSQL_PORT }}'
  BLOBS_DBMS: '{{ .Values.node_configs.database.BLOBS_DBMS }}'
  BLOBS_REUSE: '{{ .Values.node_configs.database.BLOBS_REUSE }}'

  # -- blockchain --
  LEDGER_CONN: '{{ .Values.node_configs.blockchain.LEDGER_CONN }}'
  SYNC_TIME: '{{ .Values.node_configs.blockchain.SYNC_TIME }}'
  BLOCKCHAIN_SOURCE: '{{ .Values.node_configs.blockchain.BLOCKCHAIN_SOURCE }}'
  BLOCKCHAIN_DESTINATION: '{{ .Values.node_configs.blockchain.LEDGER_CONN }}'

  # -- operator ---
  CLUSTER_NAME: '{{ .Values.node_configs.operator.CLUSTER_NAME }}'
  DEFAULT_DBMS: '{{ .Values.node_configs.operator.DEFAULT_DBMS }}'
  {{- if ne .Values.node_configs.operator.MEMBER "" }}
  MEMBER: '{{ .Values.node_configs.operator.MEMBER }}'
  {{ end }}
  START_DATE: '{{ .Values.node_configs.operator.START_DATE }}'
  {{- if ne .Values.node_configs.operator.TABLE_NAME "" }}
  TABLE_NAME: '{{ .Values.node_configs.operator.TABLE_NAME }}'
  {{ end }}
  PARTITION_COLUMN: '{{ .Values.node_configs.operator.PARTITION_COLUMN }}'
  PARTITION_INTERVAL: '{{ .Values.node_configs.operator.PARTITION_INTERVAL }}'
  PARTITION_KEEP: '{{ .Values.node_configs.operator.PARTITION_KEEP }}'
  PARTITION_SYNC: '{{ .Values.node_configs.operator.PARTITION_SYNC }}'

  # -- MQTT --
  ENABLE_MQTT: '{{ .Values.node_configs.mqtt.ENABLE_MQTT }}'

  MQTT_BROKER: '{{ .Values.node_configs.mqtt.MQTT_BROKER }}'
  MQTT_PORT: '{{ .Values.node_configs.mqtt.MQTT_PORT }}'
  MQTT_USER: '{{ .Values.node_configs.mqtt.MQTT_USER }}'
  MQTT_PASSWD: '{{ .Values.node_configs.mqtt.MQTT_PASSWD }}'
  MQTT_LOG: '{{ .Values.node_configs.mqtt.MQTT_LOG }}'
  MSG_TOPIC: '{{ .Values.node_configs.mqtt.MSG_TOPIC }}'
  MSG_DBMS: '{{ .Values.node_configs.mqtt.MSG_DBMS }}'
  MSG_TABLE: '{{ .Values.node_configs.mqtt.MSG_TABLE }}'
  MSG_TIMESTAMP_COLUMN: '{{ .Values.node_configs.mqtt.MSG_TIMESTAMP_COLUMN }}'
  MSG_VALUE_COLUMN: '{{ .Values.node_configs.mqtt.MSG_VALUE_COLUMN }}'
  MSG_VALUE_COLUMN_TYPE: '{{ .Values.node_configs.mqtt.MSG_VALUE_COLUMN_TYPE }}'

  # -- Advanced --
  DEPLOY_LOCAL_SCRIPT: '{{ .Values.node_configs.advanced.DEPLOY_LOCAL_SCRIPT }}'
  DEPLOY_SYSLOG: '{{ .Values.node_configs.advanced.DEPLOY_SYSLOG }}'
  MONITOR_NODES: '{{ .Values.node_configs.advanced.MONITOR_NODES }}'
  MONITOR_NODE: '{{ .Values.node_configs.advanced.MONITOR_NODE }}'
  COMPRESS_FILE: '{{ .Values.node_configs.advanced.COMPRESS_FILE }}'
  QUERY_POOL: '{{ .Values.node_configs.advanced.QUERY_POOL }}'
  WRITE_IMMEDIATE: '{{ .Values.node_configs.advanced.WRITE_IMMEDIATE }}'
  THRESHOLD_TIME: '{{ .Values.node_configs.advanced.THRESHOLD_TIME }}'
  THRESHOLD_VOLUME: '{{ .Values.node_configs.advanced.THRESHOLD_VOLUME }}'



