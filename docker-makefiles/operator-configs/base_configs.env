#--- General ---
# AnyLog License Key
LICENSE_KEY=""
# Information regarding which AnyLog node configurations to enable. By default, even if everything is disabled, AnyLog starts TCP and REST connection protocols
NODE_TYPE=operator
# Name of the AnyLog instance
NODE_NAME=""
# Owner of the AnyLog instance
COMPANY_NAME=New Company

#--- Networking ---
# Port address used by AnyLog's TCP protocol to communicate with other nodes in the network
ANYLOG_SERVER_PORT=32148
# Port address used by AnyLog's REST protocol
ANYLOG_REST_PORT=32149
# Port value to be used as an MQTT broker, or some other third-party broker
ANYLOG_BROKER_PORT=""
# A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
TCP_BIND=true
# A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
REST_BIND=false
# A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
BROKER_BIND=false

#--- Database ---
# Physical database type (sqlite or psql)
DB_TYPE=sqlite
# Username for SQL database connection
DB_USER=""
# Password correlated to database user
DB_PASSWD=""
# Database IP address
DB_IP=127.0.0.1
# Database port number
DB_PORT=5432
# Whether to set autocommit data
AUTOCOMMIT=false
# Whether to enable NoSQL logical database
ENABLE_NOSQL=false
# Whether to start to start system_query logical database
SYSTEM_QUERY=false
# Run system_query using in-memory SQLite. If set to false, will use pre-set database type
MEMORY=false

# Whether to enable NoSQL logical database
ENABLE_NOSQL=false
# Physical database type
NOSQL_TYPE=mongo
# Username for SQL database connection
NOSQL_USER=admin
# Password correlated to database user
NOSQL_PASSWD=passwd
# Database IP address
NOSQL_IP=127.0.0.1
# Database port number
NOSQL_PORT=27017
# Store blobs in database
BLOBS_DBMS=false
# Whether (re)store a blob if already exists
BLOBS_REUSE=true

#--- Blockchain ---
#----------------------------------------------------------------------------------------------------------------------#
# Blockchain Layer Configuration
#
# The blockchain layer manages metadata either through a master node or the Optimism platform.
#
# When `BLOCKCHAIN_SOURCE` is set to a platform other than "master" (e.g., "optimism") and `NODE_TYPE` is "master",
# the node will function as a relay between the blockchain and other nodes.
#
# To use a real blockchain:
#   - Set `BLOCKCHAIN_SOURCE` to "optimism".
#   - By default, deployment scripts use AnyLogâ€™s test configurations for an Optimism-based blockchain.
#   - To use your own deployment, update the configurations in the "Real Blockchain" section.
#
# Steps to deploy using a real blockchain:
#   1. Deploy Node A with `BLOCKCHAIN_SOURCE` set to "optimism".
#   2. On Node A, retrieve the contract ID using the AnyLog command: `print !contract_id`.
#   3. Configure Node B with:
#      - `BLOCKCHAIN_SOURCE` set to "optimism"
#      - `CONTRACT` set to the contract ID obtained from Node A.
#   4. Deploy Node B.
#   5. Repeat the process for additional nodes.
#
# Relay-Based Deployment:
#   - Alternatively, users can configure only the master node to interface directly with the blockchain.
#   - Other nodes will sync metadata through the master, instead of communicating with the blockchain directly.
#   - This setup, called a "relay," reduces the need for all nodes to independently interact with the blockchain.
#----------------------------------------------------------------------------------------------------------------------#
# blockchain platform to be used - either master or optimism
BLOCKCHAIN_SOURCE=master
# How often to sync from blockchain
BLOCKCHAIN_SYNC=30 second
# Where will the copy of the blockchain be stored
BLOCKCHAIN_DESTINATION=file
# TCP connection information for Master Node - used for either non-master node relay setup, or pure master node platform
# For Master node, when TCP is bound (TCP_BIND=true) then use the actual (local) IP of the node rather than 127.0.0.1
LEDGER_CONN=10.0.0.220:32048

#---- Real blockchain ---
# SubQuery network participant who is responsible for serving RPC queries for blockchain data to their customers (we're using infura)
PROVIDER = ""
# keys to access crypto wallet
BLOCKCHAIN_PUBLIC_KEY = ""
BLOCKCHAIN_PRIVATE_KEY = ""
# Wallet ID
CHAIN_ID=""
# Contract to work against on the blockchain
CONTRACT=""


#--- Operator ---
# Owner of the cluster
CLUSTER_NAME=nc-cluster1
# Logical database name
DEFAULT_DBMS=new_company
# Whether to enable partitioning
ENABLE_PARTITIONS=true
# Which tables to partition
TABLE_NAME=*
# Which timestamp column to partition by
PARTITION_COLUMN=insert_timestamp
# Time period to partition by
PARTITION_INTERVAL=14 days
# How many partitions to keep
PARTITION_KEEP=3
# How often to check if an old partition should be removed
PARTITION_SYNC=1 day

#--- MQTT ---
# Whether to enable the default MQTT process
ENABLE_MQTT=false

# IP address of MQTT broker
MQTT_BROKER=139.144.46.246
# Port associated with MQTT broker
MQTT_PORT=1883
# User associated with MQTT broker
MQTT_USER=anyloguser
# Password associated with MQTT user
MQTT_PASSWD=mqtt4AnyLog!
# Whether to enable MQTT logging process
MQTT_LOG=false

# Topic to get data for
MSG_TOPIC=anylog-demo
# Logical database name
MSG_DBMS=new_company
# Table where to store data
MSG_TABLE=bring [table]
# Timestamp column name
MSG_TIMESTAMP_COLUMN=bring [timestamp]
# Value column name
MSG_VALUE_COLUMN=bring [value]
# Column value type
MSG_VALUE_COLUMN_TYPE=float

#----------------------------------------------------------------------------------------------------------------------#
# OPC-UA / EtherIP Process Overview:
#   1. Initially keep OPC-UA disabled. On the first iteration, run:
#        `process !anylog_path/deployment-scripts/demo-scripts/opcua_tags.al`
#      - This script creates the necessary tag and table policies on the blockchain.
#
#   2. After policies are established, the script will automatically call:
#        `process !anylog_path/deployment-scripts/demo-scripts/opcua_client.al`
#      - This initiates the OPC-UA client to begin accepting data.
#
#   3. Once the client is running, enable OPC-UA permanently in the dotenv configuaation file.
#      - This ensures that if the container reboots, the OPC-UA client will automatically resume operation.
#----------------------------------------------------------------------------------------------------------------------#
#----- OPC-UA ---
# Whether or not to enable to OPC-UA service
ENABLE_OPCUA=false
# OPC-UA URL address (ex. opcua.tcp:;//127.0.0.1:4840)
OPCUA_URL=""
# Node information the root is located in (ex. ns=2;s=DataSet)
OPCUA_NODE=""
# How often to pull data from OPC-UA
OPCUA_FREQUENCY=""
# Create OPC-UA Tags, this should only be enabled the first time a user connect to a OPC-UA
SET_OPCUA_TAGS=false

#--- Ether-IP ---
# Enable EthernetIP connectivity - used for Rockwell/Allen-Bradley PLCs
ENABLE_ETHERIP = false
# AnyLog/EdgeLake has a built-in simulator library to test EthernetIP - this can be used instead of a live PLC
# (for testing purpose only)
SIMULATOR_MODE=false
# EtherNetIP URL address (ex. 127.0.0.1)
ETHERIP_URL=""
# How often to pull data from PLC via EtherNetIP (pycomm3)
ETHERIP_FREQUENCY=""
# Create etherIP Tags, this should only be enabled the first time a user connect to a etherIP
SET_ETHERIP_TAGS=false

#--- Monitoring ---
# Whether to monitor the node or not
MONITOR_NODES=true
# Store monitoring in Operator node(s)
STORE_MONITORING=false
# For operator, accept syslog data from local (Message broker required)
SYSLOG_MONITORING=false

#--- Advanced Settings ---
# Whether to automatically run a local (or personalized) script at the end of the process
DEPLOY_LOCAL_SCRIPT=false
# Run code in debug mode
DEBUG_MODE=false