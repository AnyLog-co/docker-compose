apiVersion: v1
kind: ConfigMap
metadata:
  namespace: '{{ .Metadata.metadata.namespace }}'
  name: '{{ .Metadata.metadata.configmap_name }}'
  labels:
    app: '{{ .Metadata.metadata.app_name }}'
data:
  # -- General --
  # whether to deploy AnyLog (prod) or a linux cli (bash) with AnyLog installed, but not running
  INIT_TYPE: '{{ .Metadata.image.init_type }}'
  # AnyLog License Key
  LICENSE_KEY: '{{ .Basic_Configs.general.LICENSE_KEY }}'
  # Information regarding which AnyLog node configurations to enable. By default, even if everything is disabled, AnyLog starts TCP and REST connection protocols
  NODE_TYPE: '{{ .Basic_Configs.general.NODE_TYPE }}'
  # Name of the AnyLog instance
  NODE_NAME: '{{ .Basic_Configs.general.NODE_NAME }}'
  # Owner of the AnyLog instance
  COMPANY_NAME: '{{ .Basic_Configs.general.COMPANY_NAME }}'

  # -- directories --
  # AnyLog Root Path
  ANYLOG_PATH: '{{ .Advance_Configs.directories.ANYLOG_PATH }}'
  # !local_scripts: ${ANYLOG_HOME}/deployment-scripts/scripts
  LOCAL_SCRIPTS: '{{ .Advance_Configs.directories.LOCAL_SCRIPTS }}'
  # !test_dir: ${ANYLOG_HOME}/deployment-scripts/tests
  TEST_DIR: '{{ .Advance_Configs.directories.TEST_DIR }}'

  # -- Geolocation --
  # Coordinates of the machine - used by Grafana to map the network
  LOCATION: '{{ .Advance_Configs.geolocation.LOCATION }}'
  # Country where machine is located
  COUNTRY: '{{ .Advance_Configs.geolocation.COUNTRY }}'
  # State where machine is located
  STATE: '{{ .Advance_Configs.geolocation.STATE }}'
  # City where machine is located
  CITY: '{{ .Advance_Configs.geolocation.CITY }}'

  # -- Networking --
  ANYLOG_SERVER_PORT: {{ .Basic_Configs.networking.ANYLOG_SERVER_PORT }}
  # Port address used by AnyLog's REST protocol
  ANYLOG_REST_PORT: {{ .Basic_Configs.networking.ANYLOG_REST_PORT }}
  # Port value to be used as an MQTT broker, or some other third-party broker
  ANYLOG_BROKER_PORT: {{ .Basic_Configs.networking.ANYLOG_BROKER_PORT }}
  # A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
  TCP_BIND: '{{ .Basic_Configs.networking.TCP_BIND }}'
  # A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
  REST_BIND: '{{ .Basic_Configs.networking.REST_BIND }}'
  # A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
  BROKER_BIND: '{{ .Basic_Configs.networking.BROKER_BIND }}'

  # --> Advanced configs
  # Declare Policy name
  CONFIG_NAME: '{{ .Advance_Configs.networking.CONFIG_NAME }}'
  # Overlay IP address - if set, will replace local IP address when connecting to network
  OVERLAY_IP: '{{ .Advance_Configs.networking.OVERLAY_IP }}'
  # Configurable (local) IP address that can be used when behind a proxy, or using Kubernetes for static IP
  PROXY_IP: '{{ .Advance_Configs.networking.PROXY_IP }}'
  # The number of concurrent threads supporting HTTP requests.
  TCP_THREADS: {{ .Advance_Configs.networking.TCP_THREADS }}
  # Timeout in seconds to determine a time interval such that if no response is being returned during the time interval, the system returns timeout error.
  REST_TIMEOUT: {{ .Advance_Configs.networking.REST_TIMEOUT }}
  # The number of concurrent threads supporting HTTP requests.
  REST_THREADS: {{ .Advance_Configs.networking.REST_THREADS }}
  # The number of concurrent threads supporting broker requests.
  BROKER_THREADS: {{ .Advance_Configs.networking.BROKER_THREADS }}

  # -- Database --
  # Physical database type (sqlite or psql)
  DB_TYPE: '{{ .Basic_Configs.database.DB_TYPE }}'
  # Username for SQL database connection
  DB_USER: '{{ .Basic_Configs.database.DB_USER }}'
  # Password correlated to database user
  DB_PASSWD: '{{ .Basic_Configs.database.DB_PASSWD }}'
  # Database IP address
  DB_IP: '{{ .Basic_Configs.database.DB_IP }}'
  # Database port number
  DB_PORT: {{ .Basic_Configs.database.DB_PORT }}
  # Whether to set autocommit data
  AUTOCOMMIT: '{{ .Basic_Configs.database.AUTOCOMMIT }}'

  # --> Advanced configs
  # Whether to start system_query logical database
  SYSTEM_QUERY: '{{ .Advance_Configs.database.SYSTEM_QUERY }}'
  # Run system_query using in-memory SQLite. If set to false, will use pre-set database type
  MEMORY: '{{ .Advance_Configs.database.MEMORY }}'
  # Physical database type
  NOSQL_TYPE: '{{ .Advance_Configs.database.NOSQL_TYPE }}'
  # Username for SQL database connection
  NOSQL_USER: '{{ .Advance_Configs.database.NOSQL_USER }}'
  # Password correlated to database user
  NOSQL_PASSWD: '{{ .Advance_Configs.database.NOSQL_PASSWD }}'
  # Database IP address
  NOSQL_IP: '{{ .Advance_Configs.database.NOSQL_IP }}'
  # Database port number
  NOSQL_PORT: {{ .Advance_Configs.database.NOSQL_PORT }}
  # Store blobs in database
  BLOBS_DBMS: '{{ .Advance_Configs.database.BLOBS_DBMS }}'
  # Whether (re)store a blob if already exists
  BLOBS_REUSE: '{{ .Advance_Configs.database.BLOBS_REUSE }}'

  # -- Blockchain --
  # TCP connection information for Master Node
  LEDGER_CONN: '{{ .Basic_Configs.blockchain.LEDGER_CONN }}'

  # --> Advanced configs
  # How often to sync from blockchain
  SYNC_TIME: '{{ .Advance_Configs.blockchain.SYNC_TIME }}'
  # Source of where the data is coming from
  BLOCKCHAIN_SOURCE: '{{ .Advance_Configs.blockchain.BLOCKCHAIN_SOURCE }}'
  # Where will the copy of the blockchain be stored
  BLOCKCHAIN_DESTINATION: '{{ .Advance_Configs.blockchain.BLOCKCHAIN_DESTINATION }}'


  # -- MQTT --
  # Whether to enable the default MQTT process
  ENABLE_MQTT: '{{ .Basic_Configs.mqtt.ENABLE_MQTT }}'

  # IP address of MQTT broker
  MQTT_BROKER: '{{ .Basic_Configs.mqtt.MQTT_BROKER }}'
  # Port associated with MQTT broker
  MQTT_PORT: {{ .Basic_Configs.mqtt.MQTT_PORT }}
  # User associated with MQTT broker
  MQTT_USER: '{{ .Basic_Configs.mqtt.MQTT_USER }}'
  # Password associated with MQTT user
  MQTT_PASSWD: '{{ .Basic_Configs.mqtt.MQTT_PASSWD }}'
  # Whether to enable MQTT logging process
  MQTT_LOG: '{{ .Basic_Configs.mqtt.MQTT_LOG }}'

  # Topic to get data for
  MSG_TOPIC: '{{ .Basic_Configs.mqtt.MSG_TOPIC }}'
  # Logical database name
  MSG_DBMS: '{{ .Basic_Configs.mqtt.MSG_DBMS }}'
  # Table where to store data
  MSG_TABLE: '{{ .Basic_Configs.mqtt.MSG_TABLE }}'
  # Timestamp column name
  MSG_TIMESTAMP_COLUMN: '{{ .Basic_Configs.mqtt.MSG_TIMESTAMP_COLUMN }}'
  # Value column name
  MSG_VALUE_COLUMN: '{{ .Basic_Configs.mqtt.MSG_VALUE_COLUMN }}'
  # Column value type
  MSG_VALUE_COLUMN_TYPE: '{{ .Basic_Configs.mqtt.MSG_VALUE_COLUMN_TYPE }}'

  # -- Operator --
  # Operator ID
  MEMBER: '{{ .Advance_Configs.operator.MEMBER }}'
  # How many days back to sync between nodes
  START_DATE: {{ .Advance_Configs.operator.START_DATE }}
  # Which tables to partition
  TABLE_NAME: '{{ .Advance_Configs.operator.TABLE_NAME }}'
  # Which timestamp column to partition by
  PARTITION_COLUMN: '{{ .Advance_Configs.operator.PARTITION_COLUMN }}'
  # Time period to partition by
  PARTITION_INTERVAL: '{{ .Advance_Configs.operator.PARTITION_INTERVAL }}'
  # How many partitions to keep
  PARTITION_KEEP: {{ .Advance_Configs.operator.PARTITION_KEEP }}
  # How often to check if an old partition should be removed
  PARTITION_SYNC: '{{ .Advance_Configs.operator.PARTITION_SYNC }}'

  # -- advance_settings --
  # Whether to automatically run a local (or personalized) script at the end of the process
  DEPLOY_LOCAL_SCRIPT: '{{ .Basic_Configs.advance_settings.DEPLOY_LOCAL_SCRIPT }}'
  # Deploy a process that accepts syslog - requires Message broker running
  DEPLOY_SYSLOG: '{{ .Basic_Configs.advance_settings.DEPLOY_SYSLOG }}'
  # Whether to monitor the node or not
  MONITOR_NODES: '{{ .Basic_Configs.advance_settings.MONITOR_NODES }}'

  # --> Advance Configs
  # Compress JSON and SQL file(s) backup
  COMPRESS_FILE: '{{ .Advance_Configs.advance_settings.COMPRESS_FILE }}'
  # Number of parallel queries
  QUERY_POOL: {{ .Advance_Configs.advance_settings.QUERY_POOL }}
  # When data comes in write to database immediately, as opposed to waiting for a full buffer
  WRITE_IMMEDIATE: '{{ .Advance_Configs.advance_settings.WRITE_IMMEDIATE }}'
  # If buffer is not full, how long to wait until pushing data through
  THRESHOLD_TIME: '{{ .Advance_Configs.advance_settings.THRESHOLD_TIME }}'
  # Buffer size to reach, at which point data is pushed through
  THRESHOLD_VOLUME: '{{ .Advance_Configs.advance_settings.THRESHOLD_VOLUME }}'
  # Which node type to send monitoring information to
  MONITOR_NODE: '{{ .Advance_Configs.advance_settings.MONITOR_NODE }}'

  # -- Nebula --
  # whether to enable Lighthouse
  ENABLE_NEBULA: '{{ .Advance_Configs.nebula.ENABLE_NEBULA }}'
  # whether node is type lighthouse
  IS_LIGHTHOUSE: '{{ .Advance_Configs.nebula.IS_LIGHTHOUSE }}'
  # Nebula IP address for Lighthouse node
  LIGHTHOUSE_IP: '{{ .Advance_Configs.nebula.LIGHTHOUSE_IP }}'
  # External physical IP of the node associated with Nebula lighthouse
  LIGHTHOUSE_NODE_IP: '{{ .Advance_Configs.nebula.LIGHTHOUSE_NODE_IP }}'